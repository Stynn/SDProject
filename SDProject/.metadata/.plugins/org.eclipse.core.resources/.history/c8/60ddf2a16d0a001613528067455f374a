package ctrl;

import laf.ShowDialog;
import lipermi.net.Client;

/**
 * Class which represent the routine of the client at the level 0
 */
public class ClientSuperRoutine extends Thread {
	
	private String clientName = "";	//Client name of the routine
	private Client client = null;	//Client
	private String ip;				//the ip of the server
	int port;						//The port of the server
	Boolean sending;
	
	/**
	 * Constructor of the Thread
	 * @param name Client name of the routine
	 */
	public ClientSuperRoutine(Client client, String name, String ip, int port){
		this.client = client;
		this.clientName = name;
		this.ip = ip;
		this.port = port;
	}
	
	/**
	 * Routine
	 */
	public void run() {
		Boolean isConnected = true;
		Boolean isActive = false;
		Boolean serverIsOk = false;
		
		sending = false;
		
		//Check if we are always into the server list
		ConnectivityServices connecivityServicesRemote;
		connecivityServicesRemote = (ConnectivityServices) this.client.getGlobal(ConnectivityServices.class);
		
		RoutineServices routineServicesRemote;
		routineServicesRemote = (RoutineServices) this.client.getGlobal(RoutineServices.class);
		
		while (isConnected){
			//Testing if the client is connected
			isConnected = connecivityServicesRemote.amIConnected(clientName);
			if (isConnected){
				//Testing if the client is active
				isActive = routineServicesRemote.amIActive(clientName);
				//Testing if the client is active
				if (isActive){
					serverIsOk = routineServicesRemote.isServerOkForReception();
					//Testing if the server is ok for reception
					if (serverIsOk && !sending){
						sending = true;
						ClientRoutineImage clientroutine = new ClientRoutineImage(this.client, this.clientName, this.ip, this.port, this);
						clientroutine.start();
						//ClientRoutineController clientController = new ClientRoutineController(this.client, this.clientName, this);
						//clientController.start();
					}else if (!serverIsOk && sending){
						sending = false;
					}
				}
			}else{
				System.out.println("										CLIENT<"+this.clientName+"> : End");
				@SuppressWarnings("unused")
				ShowDialog s = new ShowDialog("Service stoped by the supervisor");
			}
			
			//Every 2s checking the connection
			try {
				Thread.sleep(2000);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
	}

	public Boolean getSending() {
		return sending;
	}
	
	
}
