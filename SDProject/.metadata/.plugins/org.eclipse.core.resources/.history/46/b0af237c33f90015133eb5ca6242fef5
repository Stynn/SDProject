package ctrl;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import vw.ConfigIpDialog;

public class AddressIPGetter {

	public AddressIPGetter(){
		
	}
	
	/**
	 * Method use to get the address ip
	 * @return
	 */
	public static String getIp(){
		String ip = "ERROR";
		String motif = "Please enter the URL of a website where you can read your IP address :";
		
		String url = fileConfig(motif, true);
		
		//searching the ip address on the web site
		Boolean found = false;
		
		while(!found){
			Boolean badUrl = false;
			try{
				URL whatismyip = new URL(url);
				BufferedReader in = null;
				in = new BufferedReader(new InputStreamReader(whatismyip.openStream()));
				String line;
				Object[] currentRes;
				Boolean f = false;
				while ((line = in.readLine()) != null && !f){
					currentRes = extractIpAddress(line);
					//if we not find a ip address
					if (!(Boolean)currentRes[0]){
						ip = "Not found";
					}else{
						f = (Boolean)currentRes[0];
						found = (Boolean) currentRes[0];
						ip = (String)currentRes[1];
					}
				}
			}catch(MalformedURLException e){
				badUrl = true;
			}catch( Exception e){
				e.printStackTrace();
			}
			
			if (!badUrl){
				if (!found)
					url = fileConfig("Error : Maybe you do not have a connection, or the remote site is deficient - Please try with a different remote site :", false);
			}else{
				url = fileConfig("Error : The url enter is malformed - Please retry :", false);
			}
		}
		
		return ip;
	}
	
	/**
	 * Method use to create the file if it doesn't exist or if error
	 * @param motif
	 * @return
	 */
	private static String fileConfig(String motif, Boolean classic){
		String file = "config.ip";
		File configip = new File(file);
		
		
		if (classic){
			//If the file doesn't exist : create it !
			if (!configip.exists()){
				try {
					FileWriter fw;
					fw = new FileWriter (file);
					BufferedWriter bw = new BufferedWriter (fw);
					PrintWriter outPutFile = new PrintWriter (bw);
					
					//Open the config frame
					@SuppressWarnings("unused")
					ConfigIpDialog ipFrame = new ConfigIpDialog(motif, outPutFile);
					
					outPutFile.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}else{
			try {
				FileWriter fw;
				fw = new FileWriter (file);
				BufferedWriter bw = new BufferedWriter (fw);
				PrintWriter outPutFile = new PrintWriter (bw);
				
				//Open the config frame
				@SuppressWarnings("unused")
				ConfigIpDialog ipFrame = new ConfigIpDialog(motif, outPutFile);
				
				outPutFile.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		
		
		String url = "";
		
		//Open the file and read the first line
		try{
			InputStream ips = new FileInputStream(file);
			InputStreamReader ipsr=new InputStreamReader(ips);
			BufferedReader br=new BufferedReader(ipsr);
			String line;
			while ((line = br.readLine())!=null){
				url += line+"\n";
			}
			br.close();
		}		
		catch (Exception e){
			e.printStackTrace();
		}
		
		return url;
	}
	
	/**
	 * Method use to analyse a line and to extract the ip address of the line
	 * @param line The line to analyse
	 * @return true if the ip address is found and the ip address
	 */
	private static Object[] extractIpAddress(String line){
		Object[] res = new Object[2];
		res[0] = false;
		res[1] = "";
		
		String ipPattern = "([0-9]{1,3}\\.){3}[0-9]{1,3}";
		
		Pattern r = Pattern.compile(ipPattern);
		
		Matcher m = r.matcher(line);
		
		if (m.find()){
			res[0] = true;
			res[1] = m.group(0);
		}
		
		return res;
	}
	
	/**
	 * Check if the ip is valid
	 * @param ip The ip to check
	 */
	public static isValidIp(String ip){
		Boolean res = false;
		
		
		
		return res;
	}
	
}
